openapi: 3.0.1
info:
  version: 1.0.0
  title: Clinic Management Service
  description: Clinic Management provides information to manage medical reservations
  license:
    name: Nexym
paths:
  /api/v1/doctors:
    post:
      summary: Register a new doctor
      operationId: registerDoctor
      tags:
        - Doctors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoctorRequest'
      responses:
        '201':
          description: New doctor was created successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Retrieve a list of doctors
      operationId: searchDoctors
      tags:
        - Doctors
      parameters:
        - name: page
          in: query
          description: Page index, starts at 0
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page, default is 10
          required: false
          schema:
            type: integer
            default: 10
#        - name: speciality
#          in: query
#          description: Filter by speciality
#          required: false
#          schema:
#            $ref: "#/components/schemas/Speciality"
#        - name: availability
#          in: query
#          description: Filter by availability
#          required: false
#          schema:
#            type: string
#            enum:
#              - 3 days
#              - 5 days
#              - 1 week
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorListResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/doctors/{doctorId}:
    get:
      summary: Retrieve info for a specific doctor
      operationId: getDoctorById
      tags:
        - Doctors
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a doctor by ID
      operationId: updateDoctorById
      tags:
        - Doctors
      parameters:
        - name: doctorId
          in: path
          description: ID of the doctor to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoctorRequest'
      responses:
        '204':
          description: Doctor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a specific doctor
      operationId: deleteDoctorById
      tags:
        - Doctors
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Doctor deleted successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/patients:
    post:
      summary: Register a new patient
      operationId: registerPatient
      tags:
        - Patients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientRequest'
      responses:
        '201':
          description: New patient was created successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Retrieve a list of patients
      operationId: searchPatients
      tags:
        - Patients
      parameters:
        - name: page
          in: query
          description: Page index, starts at 0
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page, default is 10
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientListResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /api/v1/patients/{patientId}:
    get:
      summary: Retrieve info for a specific patient
      operationId: getPatientById
      tags:
        - Patients
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a patient by ID
      operationId: updatePatientById
      tags:
        - Patients
      parameters:
        - name: patientId
          in: path
          description: ID of the patient to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientRequest'
      responses:
        '204':
          description: Patient updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a specific patient
      operationId: deletePatientById
      tags:
        - Patients
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Patient deleted successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/authenticate:
    post:
      summary: Authenticate an existing user
      operationId: authenticate
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/AuthenticateResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/specialities:
    get:
      summary: Retrieve all specialities
      operationId: getSpecialities
      tags:
        - Specialities
      responses:
        '200':
          description: List of specialities
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpecialityListResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/doctors/{doctorId}/availabilities:
    post:
      summary: Add a new availability for doctor
      operationId: addNewAvailability
      tags:
        - Availabilities
      parameters:
        - name: doctorId
          in: path
          required: true
          description: ID of the doctor
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityRequest'
      responses:
        '200':
          description: Availability added successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/patients/{patientId}/appointments:
    post:
      summary: Add a new appointment for patient
      operationId: addNewAppointment
      tags:
        - Appointments
      parameters:
        - name: patientId
          in: path
          required: true
          description: ID of the patient
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
      responses:
        '200':
          description: Appointment added successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/users:
    get:
      summary: Retrieve all users
      operationId: getUserList
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Availability:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    AvailabilityRequest:
      type: object
      properties:
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
    AvailabilityListResponse:
      type: array
      items:
        $ref: "#/components/schemas/Availability"
    Speciality:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        appointmentDuration:
          type: integer
          format: int64
    SpecialityListResponse:
            type: array
            items:
              $ref: "#/components/schemas/Speciality"
    AuthenticateRequest:
      type: object
      properties:
        email:
          type: string
          description: 'Email address of the user'
          example: 'john.doe@mail.com'
        password:
          type: string
          description: 'Password of the user'
    AuthenticateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isDoctor:
          type: boolean
        token:
          type: string
        expiresIn:
          type: integer
          format: int64
        role:
          type: string
          example: 'PATIENT'
          description: 'The role of the authenticated user'
          enum:
            - PATIENT
            - DOCTOR
    UserRequest:
      type: object
      properties:
        civility:
          type: string
          description: 'Civility of the user'
          example: 'MR'
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
          description: 'First name of the user'
          example: 'John'
        lastName:
          type: string
          description: 'Last name of the user'
          example: 'Doe'
        email:
          type: string
          description: 'Email address of the user'
          example: 'john.doe@mail.com'
        phoneNumber:
          type: string
          description: 'Phone number of the user'
          example: '0664124312'
        password:
          type: string
          description: 'Password of the user'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        civility:
          type: string
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    UserListResponse:
      type: array
      items:
        $ref: "#/components/schemas/User"
    DoctorRequest:
      type: object
      properties:
        civility:
          type: string
          description: 'Civility of the doctor'
          example: 'MRS'
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
          description: 'First name of the doctor'
          example: 'Jessie'
        lastName:
          type: string
          description: 'Last name of the doctor'
          example: 'Doe'
        email:
          type: string
          description: 'Email address of the doctor'
          example: 'jessie.doe@mail.com'
        phoneNumber:
          type: string
          description: 'Phone number of the doctor'
          example: '0672134312'
        address:
          type: string
          description: 'Address of the doctor'
          example: '0664124312'
        password:
          type: string
          description: 'Password of the doctor'
        specialityId:
          type: integer
          format: int64
          description: 'Speciality of the doctor'
          example: 1
    Doctor:
      type: object
      properties:
        id:
          type: integer
          format: int64
        civility:
          type: string
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        specialityId:
          type: integer
          format: int64
        availabilities:
          $ref: "#/components/schemas/AvailabilityListResponse"
        creationDate:
          type: string
          format: date-time
    DoctorListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Doctor"
        first:
          type: boolean
        last:
          type: boolean
        totalPages:
          type: integer
        totalElements:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
    PatientRequest:
      type: object
      properties:
        civility:
          type: string
          description: 'Civility of the patient'
          example: 'MR'
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
          description: 'First name of the patient'
          example: 'John'
        lastName:
          type: string
          description: 'Last name of the patient'
          example: 'Doe'
        email:
          type: string
          description: 'Email address of the patient'
          example: 'john.doe@mail.com'
        phoneNumber:
          type: string
          description: 'Phone number of the patient'
          example: '0664124312'
        password:
          type: string
          description: 'Password of the doctor'
    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        civility:
          type: string
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        appointments:
          type: array
          items:
            $ref: "#/components/schemas/Appointment"
        creationDate:
          type: string
          format: date-time
    PatientListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Patient"
        first:
          type: boolean
        last:
          type: boolean
        totalPages:
          type: integer
        totalElements:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
    Appointment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - PENDING
            - DONE
        prescription:
          type: string
        appointmentDate:
          type: string
          format: date-time
    AppointmentRequest:
      type: object
      properties:
        doctorId:
          type: integer
          format: int64
        appointmentDate:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        error:
          type: string
        path:
          type: string
        status:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        subErrors:
          type: array
          items:
            type: string