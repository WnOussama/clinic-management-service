openapi: 3.0.1
info:
  version: 1.0.0
  title: Clinic Management Service
  description: Clinic Management provides information to manage medical reservations
  license:
    name: Nexym
paths:
  /api/v1/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: New user was created successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/authenticate:
    post:
      summary: Authenticate an existing user
      operationId: authenticate
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/AuthenticateResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users:
    get:
      summary: Retrieve all users
      operationId: getUserList
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/users/{userId}:
    get:
      summary: Retrieve info for a specific user
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a user by ID
      operationId: updateUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a specific user
      operationId: deleteUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    AuthenticateRequest:
      type: object
      properties:
        email:
          type: string
          description: 'Email address of the user'
          example: 'john.doe@mail.com'
        password:
          type: string
          description: 'Password of the user'
    AuthenticateResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          format: int64
    UserRequest:
      type: object
      properties:
        civility:
          type: string
          description: 'Civility of the user'
          example: 'MR'
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
          description: 'First name of the user'
          example: 'John'
        lastName:
          type: string
          description: 'Last name of the user'
          example: 'Doe'
        role:
          type: string
          description: 'Role of the user'
          example: 'PATIENT'
          enum:
            - DOCTOR
            - PATIENT
        email:
          type: string
          description: 'Email address of the user'
          example: 'john.doe@mail.com'
        phoneNumber:
          type: string
          description: 'Phone number of the user'
          example: '0664124312'
        password:
          type: string
          description: 'Password of the user'
    UserListResponse:
      type: array
      items:
        $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        civility:
          type: string
          enum:
            - MR
            - MS
            - MRS
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum:
            - DOCTOR
            - PATIENT
        email:
          type: string
        phoneNumber:
          type: string
        creationDate:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        error:
          type: string
        path:
          type: string
        status:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        subErrors:
          type: array
          items:
            type: string